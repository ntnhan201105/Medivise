version: "3.9"
name: medivise-backend

services:
  postgres:
    image: postgres:17.6
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: medivise
      POSTGRES_PASSWORD: medivise
      POSTGRES_DB: medivisedb
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # MinIO Console
    volumes:
      - ./data/minio_data:/data
  
  cache:
    image: redis:7.2-alpine
    container_name: cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis_data:/data
    environment:
      REDIS_PASSWORD: redispassword
    command: >
      sh -c "redis-server --appendonly yes --requirepass $$REDIS_PASSWORD"

  mlflow:
    image: ghcr.io/mlflow/mlflow:v3.2.0
    container_name: mlflow_server
    restart: unless-stopped
    platform: linux/amd64
    depends_on:
      - minio
    ports:
      - "5001:5000"
    environment:
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
    volumes:
      - ./data/mlflow_data:/mlflow  # store SQLite file
    command: >
      mlflow server 
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
      --port 5000
      --serve-artifacts

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: medivise-backend-service
        APP_VERSION: 1.0.0
        ENV: dev
    container_name: medivise-backend-service
    restart: unless-stopped
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - postgres
      - minio
      - mlflow
    ports:
      - "8000:8000"
    volumes:
      - .:/usr/src/app
    env_file:
      - .env
      

volumes:
  postgres_data:
